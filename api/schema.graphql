# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  lastName: String
  email: String
  password: PasswordState
  status: String
  cart(where: CartWhereInput! = {}, orderBy: [CartOrderByInput!]! = [], take: Int, skip: Int! = 0): [Cart!]
  cartCount(where: CartWhereInput! = {}): Int
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
  role: String
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0): [Course!]
  coursesCount(where: CourseWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  comments(where: CommentWhereInput! = {}, orderBy: [CommentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
  createdAt: DateTime
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  lastName: StringFilter
  email: StringFilter
  status: StringNullableFilter
  cart: CartManyRelationFilter
  orders: OrderManyRelationFilter
  role: StringNullableFilter
  courses: CourseManyRelationFilter
  events: EventManyRelationFilter
  posts: PostManyRelationFilter
  comments: CommentManyRelationFilter
  createdAt: DateTimeNullableFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input CartManyRelationFilter {
  every: CartWhereInput
  some: CartWhereInput
  none: CartWhereInput
}

input OrderManyRelationFilter {
  every: OrderWhereInput
  some: OrderWhereInput
  none: OrderWhereInput
}

input CourseManyRelationFilter {
  every: CourseWhereInput
  some: CourseWhereInput
  none: CourseWhereInput
}

input EventManyRelationFilter {
  every: EventWhereInput
  some: EventWhereInput
  none: EventWhereInput
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input CommentManyRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  status: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  lastName: String
  email: String
  password: String
  status: String
  cart: CartRelateToManyForUpdateInput
  orders: OrderRelateToManyForUpdateInput
  role: String
  courses: CourseRelateToManyForUpdateInput
  events: EventRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
  comments: CommentRelateToManyForUpdateInput
  createdAt: DateTime
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input CartRelateToManyForUpdateInput {
  disconnect: [CartWhereUniqueInput!]
  set: [CartWhereUniqueInput!]
  create: [CartCreateInput!]
  connect: [CartWhereUniqueInput!]
}

input OrderRelateToManyForUpdateInput {
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input CourseRelateToManyForUpdateInput {
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input EventRelateToManyForUpdateInput {
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input CommentRelateToManyForUpdateInput {
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  lastName: String
  email: String
  password: String
  status: String
  cart: CartRelateToManyForCreateInput
  orders: OrderRelateToManyForCreateInput
  role: String
  courses: CourseRelateToManyForCreateInput
  events: EventRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
  comments: CommentRelateToManyForCreateInput
  createdAt: DateTime
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input CartRelateToManyForCreateInput {
  create: [CartCreateInput!]
  connect: [CartWhereUniqueInput!]
}

input OrderRelateToManyForCreateInput {
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input CourseRelateToManyForCreateInput {
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input EventRelateToManyForCreateInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input CommentRelateToManyForCreateInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

type Teacher {
  id: ID!
  name: String
  description: String
  image: ImageFieldOutput
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0): [Course!]
  coursesCount(where: CourseWhereInput! = {}): Int
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input TeacherWhereUniqueInput {
  id: ID
}

input TeacherWhereInput {
  AND: [TeacherWhereInput!]
  OR: [TeacherWhereInput!]
  NOT: [TeacherWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  courses: CourseManyRelationFilter
}

input TeacherOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input TeacherUpdateInput {
  name: String
  description: String
  image: ImageFieldInput
  courses: CourseRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input TeacherUpdateArgs {
  where: TeacherWhereUniqueInput!
  data: TeacherUpdateInput!
}

input TeacherCreateInput {
  name: String
  description: String
  image: ImageFieldInput
  courses: CourseRelateToManyForCreateInput
}

type Coupon {
  id: ID!
  code: String
  description: String
  maxAmount: Int
  remaining: Int
  belongsTo(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0): [Course!]
  belongsToCount(where: CourseWhereInput! = {}): Int
  discount: Int
}

input CouponWhereUniqueInput {
  id: ID
}

input CouponWhereInput {
  AND: [CouponWhereInput!]
  OR: [CouponWhereInput!]
  NOT: [CouponWhereInput!]
  id: IDFilter
  code: StringFilter
  description: StringFilter
  maxAmount: IntFilter
  belongsTo: CourseManyRelationFilter
  discount: IntNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input CouponOrderByInput {
  id: OrderDirection
  code: OrderDirection
  description: OrderDirection
  maxAmount: OrderDirection
  discount: OrderDirection
}

input CouponUpdateInput {
  code: String
  description: String
  maxAmount: Int
  belongsTo: CourseRelateToManyForUpdateInput
  discount: Int
}

input CouponUpdateArgs {
  where: CouponWhereUniqueInput!
  data: CouponUpdateInput!
}

input CouponCreateInput {
  code: String
  description: String
  maxAmount: Int
  belongsTo: CourseRelateToManyForCreateInput
  discount: Int
}

type Event {
  id: ID!
  url: String
  name: String
  image: ImageFieldOutput
  description: String
  content: Event_content_Document
  price: Int
  priceFa: String
  maxAmount: Int
  remaining: Int
  status: String
  from: String
  to: String
  registrationDeadline: String
  location: String
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  isAccessible: Boolean
  isUpcomming: Boolean
  isOpen: Boolean
}

type Event_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input EventWhereUniqueInput {
  id: ID
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  price: IntNullableFilter
  maxAmount: IntFilter
  status: StringNullableFilter
  location: StringFilter
  users: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  price: OrderDirection
  maxAmount: OrderDirection
  status: OrderDirection
  from: OrderDirection
  to: OrderDirection
  registrationDeadline: OrderDirection
  location: OrderDirection
}

input EventUpdateInput {
  name: String
  image: ImageFieldInput
  description: String
  content: JSON
  price: Int
  maxAmount: Int
  status: String
  from: String
  to: String
  registrationDeadline: String
  location: String
  users: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  image: ImageFieldInput
  description: String
  content: JSON
  price: Int
  maxAmount: Int
  status: String
  from: String
  to: String
  registrationDeadline: String
  location: String
  users: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  example: String
  someFieldName: CalendarDay
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
  someFieldName: CalendarDay
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  someFieldName: CalendarDayFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  example: OrderDirection
  someFieldName: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  example: String
  someFieldName: CalendarDay
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  example: String
  someFieldName: CalendarDay
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Course {
  id: ID!
  name: String
  description: String
  status: String
  price: Int
  priceFa: String
  rate: Float
  teacher: Teacher
  image: ImageFieldOutput
  comments(where: CommentWhereInput! = {}, orderBy: [CommentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  courseItem(where: CourseItemWhereInput! = {}, orderBy: [CourseItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [CourseItem!]
  courseItemCount(where: CourseItemWhereInput! = {}): Int
  isAccessible: Boolean
}

input CourseWhereUniqueInput {
  id: ID
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  status: StringNullableFilter
  price: IntNullableFilter
  teacher: TeacherWhereInput
  comments: CommentManyRelationFilter
  users: UserManyRelationFilter
  courseItem: CourseItemManyRelationFilter
}

input CourseItemManyRelationFilter {
  every: CourseItemWhereInput
  some: CourseItemWhereInput
  none: CourseItemWhereInput
}

input CourseOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  status: OrderDirection
  price: OrderDirection
}

input CourseUpdateInput {
  name: String
  description: String
  status: String
  price: Int
  teacher: TeacherRelateToOneForUpdateInput
  image: ImageFieldInput
  comments: CommentRelateToManyForUpdateInput
  users: UserRelateToManyForUpdateInput
  courseItem: CourseItemRelateToManyForUpdateInput
}

input TeacherRelateToOneForUpdateInput {
  create: TeacherCreateInput
  connect: TeacherWhereUniqueInput
  disconnect: Boolean
}

input CourseItemRelateToManyForUpdateInput {
  disconnect: [CourseItemWhereUniqueInput!]
  set: [CourseItemWhereUniqueInput!]
  create: [CourseItemCreateInput!]
  connect: [CourseItemWhereUniqueInput!]
}

input CourseUpdateArgs {
  where: CourseWhereUniqueInput!
  data: CourseUpdateInput!
}

input CourseCreateInput {
  name: String
  description: String
  status: String
  price: Int
  teacher: TeacherRelateToOneForCreateInput
  image: ImageFieldInput
  comments: CommentRelateToManyForCreateInput
  users: UserRelateToManyForCreateInput
  courseItem: CourseItemRelateToManyForCreateInput
}

input TeacherRelateToOneForCreateInput {
  create: TeacherCreateInput
  connect: TeacherWhereUniqueInput
}

input CourseItemRelateToManyForCreateInput {
  create: [CourseItemCreateInput!]
  connect: [CourseItemWhereUniqueInput!]
}

type CourseItem {
  id: ID!
  no: Int
  name: String
  description: String
  video: File
  course: Course
  comments(where: CommentWhereInput! = {}, orderBy: [CommentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
}

input CourseItemWhereUniqueInput {
  id: ID
}

input CourseItemWhereInput {
  AND: [CourseItemWhereInput!]
  OR: [CourseItemWhereInput!]
  NOT: [CourseItemWhereInput!]
  id: IDFilter
  no: IntNullableFilter
  name: StringFilter
  description: StringFilter
  video: FileWhereInput
  course: CourseWhereInput
  comments: CommentManyRelationFilter
}

input CourseItemOrderByInput {
  id: OrderDirection
  no: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input CourseItemUpdateInput {
  no: Int
  name: String
  description: String
  video: FileRelateToOneForUpdateInput
  course: CourseRelateToOneForUpdateInput
  comments: CommentRelateToManyForUpdateInput
}

input FileRelateToOneForUpdateInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
  disconnect: Boolean
}

input CourseRelateToOneForUpdateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
  disconnect: Boolean
}

input CourseItemUpdateArgs {
  where: CourseItemWhereUniqueInput!
  data: CourseItemUpdateInput!
}

input CourseItemCreateInput {
  no: Int
  name: String
  description: String
  video: FileRelateToOneForCreateInput
  course: CourseRelateToOneForCreateInput
  comments: CommentRelateToManyForCreateInput
}

input FileRelateToOneForCreateInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
}

input CourseRelateToOneForCreateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
}

type Category {
  id: ID!
  name: String
  description: String
  priority: Int
  parentId(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0): [Category!]
  parentIdCount(where: CategoryWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  priority: IntNullableFilter
  parentId: CategoryManyRelationFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  priority: OrderDirection
}

input CategoryUpdateInput {
  name: String
  description: String
  priority: Int
  parentId: CategoryRelateToManyForUpdateInput
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  description: String
  priority: Int
  parentId: CategoryRelateToManyForCreateInput
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type File {
  id: ID!
  altText: String
  video: FileFieldOutput
  type: String
  createdAt: DateTime
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input FileWhereUniqueInput {
  id: ID
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: IDFilter
  altText: StringFilter
  type: StringNullableFilter
  createdAt: DateTimeNullableFilter
}

input FileOrderByInput {
  id: OrderDirection
  altText: OrderDirection
  type: OrderDirection
  createdAt: OrderDirection
}

input FileUpdateInput {
  altText: String
  video: FileFieldInput
  type: String
  createdAt: DateTime
}

input FileFieldInput {
  upload: Upload!
}

input FileUpdateArgs {
  where: FileWhereUniqueInput!
  data: FileUpdateInput!
}

input FileCreateInput {
  altText: String
  video: FileFieldInput
  type: String
  createdAt: DateTime
}

type Settings {
  id: ID!
  websiteName: String
  copyrightText: String
  highlightedPosts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  highlightedPostsCount(where: PostWhereInput! = {}): Int
  jobsList: [String!]
}

input SettingsWhereUniqueInput {
  id: ID
}

input SettingsWhereInput {
  AND: [SettingsWhereInput!]
  OR: [SettingsWhereInput!]
  NOT: [SettingsWhereInput!]
  id: IDFilter
  websiteName: StringFilter
  copyrightText: StringFilter
  highlightedPosts: PostManyRelationFilter
}

input SettingsOrderByInput {
  id: OrderDirection
  websiteName: OrderDirection
  copyrightText: OrderDirection
}

input SettingsUpdateInput {
  websiteName: String
  copyrightText: String
  highlightedPosts: PostRelateToManyForUpdateInput
  jobsList: [String!]
}

input SettingsUpdateArgs {
  where: SettingsWhereUniqueInput! = {id: 1}
  data: SettingsUpdateInput!
}

input SettingsCreateInput {
  websiteName: String
  copyrightText: String
  highlightedPosts: PostRelateToManyForCreateInput
  jobsList: [String!]
}

type CartItem {
  id: ID!
  type: String
  course: Course
  event: Event
  quantity: Int
  coupon: Coupon
  cart: Cart
  priceWithDiscount: Float
}

input CartItemWhereUniqueInput {
  id: ID
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
  id: IDFilter
  course: CourseWhereInput
  event: EventWhereInput
  quantity: IntNullableFilter
  coupon: CouponWhereInput
  cart: CartWhereInput
}

input CartItemOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
}

input CartItemUpdateInput {
  course: CourseRelateToOneForUpdateInput
  event: EventRelateToOneForUpdateInput
  quantity: Int
  coupon: CouponRelateToOneForUpdateInput
  cart: CartRelateToOneForUpdateInput
}

input EventRelateToOneForUpdateInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
}

input CouponRelateToOneForUpdateInput {
  create: CouponCreateInput
  connect: CouponWhereUniqueInput
  disconnect: Boolean
}

input CartRelateToOneForUpdateInput {
  create: CartCreateInput
  connect: CartWhereUniqueInput
  disconnect: Boolean
}

input CartItemUpdateArgs {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateInput!
}

input CartItemCreateInput {
  course: CourseRelateToOneForCreateInput
  event: EventRelateToOneForCreateInput
  quantity: Int
  coupon: CouponRelateToOneForCreateInput
  cart: CartRelateToOneForCreateInput
}

input EventRelateToOneForCreateInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
}

input CouponRelateToOneForCreateInput {
  create: CouponCreateInput
  connect: CouponWhereUniqueInput
}

input CartRelateToOneForCreateInput {
  create: CartCreateInput
  connect: CartWhereUniqueInput
}

type Cart {
  id: ID!
  summery: String
  items(where: CartItemWhereInput! = {}, orderBy: [CartItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [CartItem!]
  itemsCount(where: CartItemWhereInput! = {}): Int
  user: User
  totalPrice: Float
  isCompleted: Boolean
}

input CartWhereUniqueInput {
  id: ID
}

input CartWhereInput {
  AND: [CartWhereInput!]
  OR: [CartWhereInput!]
  NOT: [CartWhereInput!]
  id: IDFilter
  items: CartItemManyRelationFilter
  user: UserWhereInput
  isCompleted: BooleanFilter
}

input CartItemManyRelationFilter {
  every: CartItemWhereInput
  some: CartItemWhereInput
  none: CartItemWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input CartOrderByInput {
  id: OrderDirection
  isCompleted: OrderDirection
}

input CartUpdateInput {
  items: CartItemRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
  isCompleted: Boolean
}

input CartItemRelateToManyForUpdateInput {
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  create: [CartItemCreateInput!]
  connect: [CartItemWhereUniqueInput!]
}

input CartUpdateArgs {
  where: CartWhereUniqueInput!
  data: CartUpdateInput!
}

input CartCreateInput {
  items: CartItemRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
  isCompleted: Boolean
}

input CartItemRelateToManyForCreateInput {
  create: [CartItemCreateInput!]
  connect: [CartItemWhereUniqueInput!]
}

type Order {
  id: ID!
  totalCost: Float
  items(where: OrderItemWhereInput! = {}, orderBy: [OrderItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [OrderItem!]
  itemsCount(where: OrderItemWhereInput! = {}): Int
  trackId: String
  user: User
  paymentStatus: Int
  orderDate: DateTime
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  totalCost: FloatNullableFilter
  items: OrderItemManyRelationFilter
  trackId: StringFilter
  user: UserWhereInput
  paymentStatus: IntNullableFilter
  orderDate: DateTimeNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input OrderItemManyRelationFilter {
  every: OrderItemWhereInput
  some: OrderItemWhereInput
  none: OrderItemWhereInput
}

input OrderOrderByInput {
  id: OrderDirection
  totalCost: OrderDirection
  trackId: OrderDirection
  paymentStatus: OrderDirection
  orderDate: OrderDirection
}

input OrderUpdateInput {
  totalCost: Float
  items: OrderItemRelateToManyForUpdateInput
  trackId: String
  user: UserRelateToOneForUpdateInput
  paymentStatus: Int
  orderDate: DateTime
}

input OrderItemRelateToManyForUpdateInput {
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  totalCost: Float
  items: OrderItemRelateToManyForCreateInput
  trackId: String
  user: UserRelateToOneForCreateInput
  paymentStatus: Int
  orderDate: DateTime
}

input OrderItemRelateToManyForCreateInput {
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

type OrderItem {
  id: ID!
  name: String
  description: String
  course: Course
  event: Event
  quantity: Int
  price: Int
  order: Order
}

input OrderItemWhereUniqueInput {
  id: ID
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  NOT: [OrderItemWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  course: CourseWhereInput
  event: EventWhereInput
  quantity: IntNullableFilter
  price: IntNullableFilter
  order: OrderWhereInput
}

input OrderItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  quantity: OrderDirection
  price: OrderDirection
}

input OrderItemUpdateInput {
  name: String
  description: String
  course: CourseRelateToOneForUpdateInput
  event: EventRelateToOneForUpdateInput
  quantity: Int
  price: Int
  order: OrderRelateToOneForUpdateInput
}

input OrderRelateToOneForUpdateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
}

input OrderItemUpdateArgs {
  where: OrderItemWhereUniqueInput!
  data: OrderItemUpdateInput!
}

input OrderItemCreateInput {
  name: String
  description: String
  course: CourseRelateToOneForCreateInput
  event: EventRelateToOneForCreateInput
  quantity: Int
  price: Int
  order: OrderRelateToOneForCreateInput
}

input OrderRelateToOneForCreateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

type Comment {
  id: ID!
  comment: String
  user: User
  course: Course
  courseItem: CourseItem
  isValidated: Boolean
  rate: Int
  createdAt: DateTime
}

input CommentWhereUniqueInput {
  id: ID
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IDFilter
  comment: StringFilter
  user: UserWhereInput
  course: CourseWhereInput
  courseItem: CourseItemWhereInput
  isValidated: BooleanFilter
  rate: IntNullableFilter
  createdAt: DateTimeNullableFilter
}

input CommentOrderByInput {
  id: OrderDirection
  comment: OrderDirection
  isValidated: OrderDirection
  rate: OrderDirection
  createdAt: OrderDirection
}

input CommentUpdateInput {
  comment: String
  user: UserRelateToOneForUpdateInput
  course: CourseRelateToOneForUpdateInput
  courseItem: CourseItemRelateToOneForUpdateInput
  isValidated: Boolean
  rate: Int
  createdAt: DateTime
}

input CourseItemRelateToOneForUpdateInput {
  create: CourseItemCreateInput
  connect: CourseItemWhereUniqueInput
  disconnect: Boolean
}

input CommentUpdateArgs {
  where: CommentWhereUniqueInput!
  data: CommentUpdateInput!
}

input CommentCreateInput {
  comment: String
  user: UserRelateToOneForCreateInput
  course: CourseRelateToOneForCreateInput
  courseItem: CourseItemRelateToOneForCreateInput
  isValidated: Boolean
  rate: Int
  createdAt: DateTime
}

input CourseItemRelateToOneForCreateInput {
  create: CourseItemCreateInput
  connect: CourseItemWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTeacher(data: TeacherCreateInput!): Teacher
  createTeachers(data: [TeacherCreateInput!]!): [Teacher]
  updateTeacher(where: TeacherWhereUniqueInput!, data: TeacherUpdateInput!): Teacher
  updateTeachers(data: [TeacherUpdateArgs!]!): [Teacher]
  deleteTeacher(where: TeacherWhereUniqueInput!): Teacher
  deleteTeachers(where: [TeacherWhereUniqueInput!]!): [Teacher]
  createCoupon(data: CouponCreateInput!): Coupon
  createCoupons(data: [CouponCreateInput!]!): [Coupon]
  updateCoupon(where: CouponWhereUniqueInput!, data: CouponUpdateInput!): Coupon
  updateCoupons(data: [CouponUpdateArgs!]!): [Coupon]
  deleteCoupon(where: CouponWhereUniqueInput!): Coupon
  deleteCoupons(where: [CouponWhereUniqueInput!]!): [Coupon]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createCourse(data: CourseCreateInput!): Course
  createCourses(data: [CourseCreateInput!]!): [Course]
  updateCourse(where: CourseWhereUniqueInput!, data: CourseUpdateInput!): Course
  updateCourses(data: [CourseUpdateArgs!]!): [Course]
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteCourses(where: [CourseWhereUniqueInput!]!): [Course]
  createCourseItem(data: CourseItemCreateInput!): CourseItem
  createCourseItems(data: [CourseItemCreateInput!]!): [CourseItem]
  updateCourseItem(where: CourseItemWhereUniqueInput!, data: CourseItemUpdateInput!): CourseItem
  updateCourseItems(data: [CourseItemUpdateArgs!]!): [CourseItem]
  deleteCourseItem(where: CourseItemWhereUniqueInput!): CourseItem
  deleteCourseItems(where: [CourseItemWhereUniqueInput!]!): [CourseItem]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createFile(data: FileCreateInput!): File
  createFiles(data: [FileCreateInput!]!): [File]
  updateFile(where: FileWhereUniqueInput!, data: FileUpdateInput!): File
  updateFiles(data: [FileUpdateArgs!]!): [File]
  deleteFile(where: FileWhereUniqueInput!): File
  deleteFiles(where: [FileWhereUniqueInput!]!): [File]
  createSettings(data: SettingsCreateInput!): Settings
  createManySettings(data: [SettingsCreateInput!]!): [Settings]
  updateSettings(where: SettingsWhereUniqueInput! = {id: 1}, data: SettingsUpdateInput!): Settings
  updateManySettings(data: [SettingsUpdateArgs!]!): [Settings]
  deleteSettings(where: SettingsWhereUniqueInput! = {id: 1}): Settings
  deleteManySettings(where: [SettingsWhereUniqueInput!]!): [Settings]
  createCartItem(data: CartItemCreateInput!): CartItem
  createCartItems(data: [CartItemCreateInput!]!): [CartItem]
  updateCartItem(where: CartItemWhereUniqueInput!, data: CartItemUpdateInput!): CartItem
  updateCartItems(data: [CartItemUpdateArgs!]!): [CartItem]
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteCartItems(where: [CartItemWhereUniqueInput!]!): [CartItem]
  createCart(data: CartCreateInput!): Cart
  createCarts(data: [CartCreateInput!]!): [Cart]
  updateCart(where: CartWhereUniqueInput!, data: CartUpdateInput!): Cart
  updateCarts(data: [CartUpdateArgs!]!): [Cart]
  deleteCart(where: CartWhereUniqueInput!): Cart
  deleteCarts(where: [CartWhereUniqueInput!]!): [Cart]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createOrderItem(data: OrderItemCreateInput!): OrderItem
  createOrderItems(data: [OrderItemCreateInput!]!): [OrderItem]
  updateOrderItem(where: OrderItemWhereUniqueInput!, data: OrderItemUpdateInput!): OrderItem
  updateOrderItems(data: [OrderItemUpdateArgs!]!): [OrderItem]
  deleteOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deleteOrderItems(where: [OrderItemWhereUniqueInput!]!): [OrderItem]
  createComment(data: CommentCreateInput!): Comment
  createComments(data: [CommentCreateInput!]!): [Comment]
  updateComment(where: CommentWhereUniqueInput!, data: CommentUpdateInput!): Comment
  updateComments(data: [CommentUpdateArgs!]!): [Comment]
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteComments(where: [CommentWhereUniqueInput!]!): [Comment]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(email: String!, token: String!, password: String!): RedeemUserPasswordResetTokenResult
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  lastName: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  teachers(where: TeacherWhereInput! = {}, orderBy: [TeacherOrderByInput!]! = [], take: Int, skip: Int! = 0): [Teacher!]
  teacher(where: TeacherWhereUniqueInput!): Teacher
  teachersCount(where: TeacherWhereInput! = {}): Int
  coupons(where: CouponWhereInput! = {}, orderBy: [CouponOrderByInput!]! = [], take: Int, skip: Int! = 0): [Coupon!]
  coupon(where: CouponWhereUniqueInput!): Coupon
  couponsCount(where: CouponWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0): [Course!]
  course(where: CourseWhereUniqueInput!): Course
  coursesCount(where: CourseWhereInput! = {}): Int
  courseItems(where: CourseItemWhereInput! = {}, orderBy: [CourseItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [CourseItem!]
  courseItem(where: CourseItemWhereUniqueInput!): CourseItem
  courseItemsCount(where: CourseItemWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  files(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0): [File!]
  file(where: FileWhereUniqueInput!): File
  filesCount(where: FileWhereInput! = {}): Int
  manySettings(where: SettingsWhereInput! = {id: {equals: 1}}, orderBy: [SettingsOrderByInput!]! = [], take: Int, skip: Int! = 0): [Settings!]
  settings(where: SettingsWhereUniqueInput! = {id: 1}): Settings
  manySettingsCount(where: SettingsWhereInput! = {id: {equals: 1}}): Int
  cartItems(where: CartItemWhereInput! = {}, orderBy: [CartItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [CartItem!]
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItemsCount(where: CartItemWhereInput! = {}): Int
  carts(where: CartWhereInput! = {}, orderBy: [CartOrderByInput!]! = [], take: Int, skip: Int! = 0): [Cart!]
  cart(where: CartWhereUniqueInput!): Cart
  cartsCount(where: CartWhereInput! = {}): Int
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  orderItems(where: OrderItemWhereInput! = {}, orderBy: [OrderItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [OrderItem!]
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  orderItemsCount(where: OrderItemWhereInput! = {}): Int
  comments(where: CommentWhereInput! = {}, orderBy: [CommentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Comment!]
  comment(where: CommentWhereUniqueInput!): Comment
  commentsCount(where: CommentWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(email: String!, token: String!): ValidateUserPasswordResetTokenResult
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
